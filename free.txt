#3.Analyze training effectiveness and identify skill gaps in the organization.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
plt.style.use("fivethirtyeight")
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
df = pd.read_csv('Uncleaned_employees_final_dataset (1).csv')
df.shape
df.head()
df.info()
df.describe().T
df.isna().sum()
df[df['education'].isna()]
df[df['previous_year_rating'].isna()]
df.dropna(inplace=True)
df.shape
df.duplicated().sum()
duplicate = df[df.duplicated()]
duplicate
df.drop_duplicates(inplace=True)
df.drop(columns=['employee_id'], inplace=True)
df.department.value_counts()
df.region.value_counts()
df.education.value_counts()
df.gender.value_counts()
df.recruitment_channel.value_counts()
num_col = df.select_dtypes(include=np.number)
plt.style.use("fivethirtyeight")
plt.figure(figsize=(30,30))
for index,column in enumerate(num_col):
 plt.subplot(7,4,index+1)
 sns.boxplot(data=num_col,x=column)
sns.countplot(x='awards_won', data=df)
plt.show()
sns.countplot(x='KPIs_met_more_than_80', data=df)
plt.show()
plt.style.use("fivethirtyeight")
fig,ax=plt.subplots(ncols=2,nrows=1,figsize=(15,5))
palette_color = sns.color_palette('rocket')
ax[0].hist(x=df['age'],color='purple')
ax[0].set_title("Distribution of Employee Age")
ax[1].pie(df['gender'].value_counts(),autopct='%1.f%%',colors=palette_color,labels=['Male'
,'Female'])
ax[1].set_title("Employee Gender")
plt.tight_layout();
plt.style.use("fivethirtyeight")
plt.figure(figsize=(15,7))
chart=sns.countplot(y='region',data=df,palette='rocket', order = 
df['region'].value_counts()[:20].index)
plt.title("Top 20 Region of Employee",
 fontsize='20',
 backgroundcolor='AliceBlue',
 color='magenta');
plt.style.use("fivethirtyeight")
M.Sc. Data Science (Semester II) Page 34
 Akash Mishra
chart=sns.countplot(x='department',data=df,palette='rocket', order = 
df['department'].value_counts().index)
plt.title("Number of Employees by Department",
 fontsize='20',
 backgroundcolor='AliceBlue',
 color='magenta')
plt.xticks(rotation=90)
plt.ylabel("")
plt.show();
plt.style.use("fivethirtyeight")
chart=sns.countplot(x='education',data=df,palette='rocket', order = 
df['education'].value_counts().index)
M.Sc. Data Science (SemesterII) Page 35
 Akash Mishra
plt.title("Frequency",
 fontsize='20',
 backgroundcolor='AliceBlue',
 color='magenta')
plt.ylabel("")
plt.show();
plt.style.use("fivethirtyeight")
chart=sns.countplot(x='recruitment_channel',data=df,palette='rocket', order = 
df['recruitment_channel'].value_counts().index)
plt.title("Frequency",
 fontsize='20',
 backgroundcolor='AliceBlue',
 color='magenta')
plt.ylabel("")
plt.show();
plt.style.use("fivethirtyeight")
fig,ax=plt.subplots(ncols=2,nrows=1,figsize=(15,5))
palette_color = sns.color_palette('rocket')
ax[0].hist(x=df['avg_training_score'],color='purple')
ax[0].set_title("Distribution of AVG Training Score")
ax[1].hist(x=df['length_of_service'], color='purple')
ax[1].set_title("Distribution of Length of Service")
plt.tight_layout();
df_copy = df.copy()
df.head()
df = pd.get_dummies(df,columns=['department'])
df = pd.get_dummies(df,columns=['gender','education','recruitment_channel'])
df.drop(columns=['region'], inplace=True)
from sklearn.preprocessing import MinMaxScaler
minmax = MinMaxScaler()
df[df.columns] = minmax.fit_transform(df)
df = df.reset_index(drop=True)
df.head()
from sklearn.decomposition import PCA
pca = PCA(n_components=2)
principalComponents = pca.fit_transform(df)
principalDf = pd.DataFrame(data = principalComponents
 , columns = ['principal component 1', 'principal component 2'])
fig, ax = plt.subplots(figsize=(10, 6))
sns.scatterplot(data=principalDf, x='principal component 1', y='principal component 2', 
ax=ax)
ax.yaxis.set_visible(False)
ax.xaxis.set_visible(False)
ax.spines[:].set_visible(False)
ax.set_xlabel('Principal Component 1', fontsize=15)
ax.set_ylabel('Principal Component 2', fontsize=15)
ax.set_title('2 component PCA', fontsize = 20)
plt.show()
inertias = []
for k in range(2, 13):
 model = KMeans(n_clusters=k,random_state=42, n_init='auto')
 model.fit(principalComponents)
 inertias.append(model.inertia_)
fig, ax = plt.subplots(figsize=(10,10))
ax.plot(range(2, 13), inertias, 'r--', marker='o', label='Inertias')
ax.spines[['top', 'right']].set_visible(False)
ax.set_xlabel('Nº clusters', fontsize=10)
ax.set_ylabel('Inertias', fontsize=10)
plt.show()
silhouette_scores = []
for k in range(2, 13):
 model = KMeans(n_clusters=k,random_state=42, n_init='auto')
 model.fit(principalComponents)
 silhouette_scores.append(silhouette_score(principalComponents, model.labels_))
fig, ax = plt.subplots(figsize=(10,10))
ax.plot(range(2, 13), silhouette_scores, color='purple', marker='o', label='silhouette scores')
ax.set_xlabel('Nº clusters', fontsize=10)
ax.set_ylabel('silhouette scores', fontsize=10)
plt.show()
fig, ax = plt.subplots(figsize=(10, 6))
sns.scatterplot(data=principalDf, x='principal component 1', y='principal component 2', 
hue='Clusters', ax=ax)
ax.set_title('Employee Distribution', fontsize=15)
ax.yaxis.set_visible(False)
ax.xaxis.set_visible(False)
ax.spines[:].set_visible(False)


#4.Develop an HR scoreboard to measure HR effectiveness and align HR strategies with
Orgazational goals.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from numpy.typing import ArrayLike
from pandas.core.frame import DataFrame, Series
from xgboost import XGBRegressor
from plotly.subplots import make_subplots
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
from IPython.display import display, HTML, Markdown
df = pd.read_csv('Employee Attrition.csv')
df = df.drop('Emp ID', axis=1)
df.head()
n_rows, n_columns = df.shape
total_data = n_rows * n_columns
print(f'total rows: {n_rows} \ntotal columns: {n_columns} \ntotal data: {total_data}')
df.info()
df.isnull().sum()
# Delete the entire missing values
df.dropna(inplace=True)
def summary_stats(dataframe: DataFrame, numeric_only = True, style=True):
 if numeric_only:
 summary: DataFrame = dataframe.describe().T
 summary["variance"] = dataframe.var(numeric_only=True)
 summary = summary if not style else summary.style.format("{:.2f}").\
 background_gradient(cmap="Blues", axis=1, 
subset=summary.columns.drop("count"))
 else:
 summary = dataframe.describe(exclude="number")
 return summary
numeric_cols_summary = summary_stats(df, style=True)
category_cols_summary = summary_stats(df, numeric_only=False)
display(numeric_cols_summary)
display(category_cols_summary)
numerical_cols = df.select_dtypes(include=['float64']).columns
# Set the style for seaborn
sns.set(style="whitegrid")
# Define a color palette with a list of distinct colors
colors = sns.color_palette("husl", len(numerical_cols))
# Create individual boxplots for each numerical column with different colors
plt.figure(figsize=(16, 12))
for i, (col, color) in enumerate(zip(numerical_cols, colors), 1):
 plt.subplot(3, 3, i)
 sns.boxplot(data=df[col], palette=[color])
 plt.title(f'Boxplot of {col}')
plt.tight_layout()
plt.show()
# Group by 'salary' and calculate summary statistics for each column
salary_summary = df.groupby('salary').agg({
 'satisfaction_level': 'mean',
 'last_evaluation': 'mean',
 'number_project': 'mean',
 'average_montly_hours': 'mean',
M.Sc. Data Science (Semester II) Page 44
 Akash Mishra
 'time_spend_company': 'mean',
 'Work_accident': 'mean',
 'promotion_last_5years': 'mean',
}).reset_index()
# Exclude 'dept' column from the table
visible_columns = ['salary', 'satisfaction_level', 'last_evaluation', 'number_project', 
'average_montly_hours', 'time_spend_company', 'Work_accident', 'promotion_last_5years']
# Create a table figure using plotly graph_objects
fig = go.Figure(data=[go.Table(
 header=dict(values=list(salary_summary[visible_columns].columns)),
 cells=dict(values=[salary_summary[visible_columns][col].round(3) if col != 'salary' else 
salary_summary[visible_columns][col] for col in 
salary_summary[visible_columns].columns])
)])
# Update layout for better visibility
fig.update_layout(
 title='Salary Summary',
 height=300
)
# Show the figure
fig.show()


5.Use predictive analytics to forecast employee attrition and develop retention strategies
import numpy as np # linear algebra
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
df = pd.read_csv('WA_Fn-UseC_-HR-Employee-Attrition.csv')
df.head()
df.shape
df.describe()
df.isnull().sum()
attrition_count = pd.DataFrame(df['Attrition'].value_counts())
attrition_count
plt.pie(attrition_count['Attrition'] , labels = ['No' , 'Yes'] , explode = (0.2,0))
sns.countplot(df['Attrition'])
df.drop(['EmployeeCount' , 'EmployeeNumber'] , axis = 1)
attrition_dummies = pd.get_dummies(df['Attrition'])
attrition_dummies.head()
df = pd.concat([df, attrition_dummies] , axis = 1)
df.head()
df = df.drop(['Attrition' , 'No'] , axis = 1)
df.head()
sns.barplot(x = 'Gender' , y = 'Yes', data = df)
sns.barplot(x = 'Department', y = 'Yes', data = df)
sns.barplot(x = 'BusinessTravel', y = 'Yes', data = df)
df = df.drop(['Age' , 'JobLevel'], axis = 1)
from sklearn.preprocessing import LabelEncoder
for column in df.columns:
 if df[column].dtype==np.number:
 continue
 else:
 df[column]=LabelEncoder().fit_transform(df[column])
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
x = df.drop(['Yes'], axis = 1)
y = df['Yes']
x_train, x_test , y_train, y_test = train_test_split(x,y, test_size = 0.3, random_state = 0)
x_train.head()
rf.fit(x_train, y_train)
rf.score(x_train, y_train)
pred = rf.predict(x_test)
from sklearn.metrics import accuracy_score
accuracy_score(y_test, pred)


6.Measure and analyze employee engagement levels within the organizations
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
a=pd.read_csv("HRDataset_v14.csv")
a
a.info()
a.describe
a['Salary'].sort_values(ascending=False).head(10) #This will return the name and salaries of top 
10 highest paid employees
a=a[a['PerformanceScore']=='PIP']
a['PerformanceScore']
a=pd.read_csv("HRDataset_v14.csv",index_col=['Employee_Name'])
a.sort_values(by=['EmpID'],ascending=True,inplace=True)
a['Absences'].value_counts()
a['MarriedID'].value_counts()
a=a[a['SpecialProjectsCount']!=0]
a['SpecialProjectsCount'].sort_values(ascending=False)
a=pd.read_csv("HRDataset_v14.csv",index_col=['Employee_Name'])
a.sort_values(by=['EmpID'],ascending=True,inplace=True)
x=[1,2,3,4,5,6,7,8,9,10]
y=a['Salary'].sort_values(ascending=False).head(10) #To return the top 10 highest salaries
z=a['Salary'].sort_values(ascending=False).tail(10) #To return the top 10 lowest salaries
plt.bar(x,y,color='g',label="Highest Salaries")
plt.bar(x,z,color='r',label="Lowest Salaries")
plt.title("Top 10 Highest vs Lowest Salaries",fontsize=15) #Giving Title to the chart
plt.legend() #Adding legends to understand what the colours are indicating
plt.show()
a['RecruitmentSource'].value_counts() #Returns the values of the sources along with no. of 
employees hired from that particular source
x=['Indeed','LinkedIn','Google Search','Employee Referral','Diversity Job 
Fair','CareerBuilder','Website','Other',
 'On-line Web application']
#The values of x should exactly be same and in sequence as listed in the above result, else it may 
return incorrect graph
y=a['RecruitmentSource'].value_counts()
plt.barh(x,y,color='m')
plt.title("Recruitment Sources",fontsize=15)
plt.grid() #Adding grid for better understanding
plt.show()
a['PerformanceScore'].value_counts()
y=a['PerformanceScore'].value_counts()
plt.plot(y,color="r",marker="o",ms=10,mfc="g")
plt.xlabel("Performance Scale",fontsize=12)
plt.ylabel("Values",fontsize=12)
plt.title("Performance Score of Employees",fontsize=15)
plt.legend()
plt.grid()
a['EmpSatisfaction'].value_counts() #This will group the no. of employees based on the ratings 
they have given on the scale of 5
x=[3,5,4,2,1] #Array is taken in this sequence because of the the previous query
y=a['EmpSatisfaction'].value_counts()
plt.stem(x,y,linefmt=":",markerfmt="mo",bottom=0,use_line_collection=False,
 orientation="horizontal")
plt.xlabel("No. of Employees",fontsize=12)
plt.ylabel("Rating Given",fontsize=12)
plt.title("Employee Satisfaction",fontsize=15)



